To set working directory:
session -> set working directory -> choose directory

To get our dataset file eg: csv file:
environment -> import dataset -> from text

To clear the console: ctrl+L
sum(1,3,5)


============================================================================================================
vectors:

c(4,7,9)
c('a','b','c')
The c function (c is short for Combine) creates a new vector by combining a list of values.
Vectors cannot hold values with different modes (types). Try mixing modes and see what happens

x[1:5]  # selects first 5 elements of vector x
x[-(1:5)]  # selects all elements except first 5 elements of vector x

a <- c(2,1,NA,7,3)  - if a value is not available
If you need a vector with a sequence of numbers you can create it with start:end notation. Let's make a vector with values from 5 through 9
5:9

A more versatile way to make sequences is to call the seq function. Let's do the same thing with seq:
seq(5, 9)

seq also allows you to use increments other than 1. Try it with steps of 0.5
seq(5, 9, 0.5)
seq(from=5, to=9, by=0.5)

mysentence <- c('walk', 'the', 'plank')
mysentence[3]
O/P: plank

Many languages start array indices at 0, but R's vector indices start at 1.

You can use a vector within the square brackets to access multiple values.
mysentence[c(1,3)] or mysentence[1:3]
o/p: "walk" "dog" 

mysentence[5:7] <- c('the', 'poop', 'deck')

You can assign names to a vector's elements by passing a second vector filled with names to the names assignment function
ranks <- 1:3
names(ranks) <- c("first", "second", "third")

now to print:
ranks["first"]
o/p: 1

assign new value:
ranks["third"]<- 4 or ranks["third"]=4


To plot a bar chart for a vector:
myVector = c(4,2,7)
barplot(myVector)
Note: if you need your barchart to be labled then assign names to the vector as names(myVector)<-("England","France","India")


Operations on vector:

a <- c(1,2,3)
a+1
o/p: 2,3,4

similarly you can do *,/,-

a <- c(1,2,3)
b <- c(5,2,4)
a+b
o/p: 6,4,7
similarly you can do *,/,-

compare vectors:
a==b
o/p: FALSE TRUE FALSE
Note: R checks each individual elements

Functions that normally work with scalars can operate on each element of a vector, too.
eg: sin(a)    -sine function on vector 'a'
	sqrt(a)
	z<--10:10	 abs(z)    -For getting absolute value
x<-seq(1,20,0.1)
y<-sin(x)


Using plot function to plot a graph
plot(x,y)
o/P: sine function

a<-c(1,2,3)
sum(a)
o/p: 6

b <- c(1,2,NA,3)
o/p: NA

to ignore the NA values,
sum(a, na.rm=TRUE)  - default for this is false

to print: print(a)

============================================================================================================
Matrices

 matrix(0,3,4)     // 3 by 4 matrix with all elements 0
 x <- matrix(c(1:9), nrow=3, ncol=3, byrow=T)
 You can also use a vector to initialize a matrix's value. To fill a 3x4 matrix, you'll need a 12-item vector.
 a<-1:12
 matrix(a,3,4)
 
 The dim assignment function sets dimensions for a matrix. It accepts a vector with the number of rows and the number of columns to assign.
 a<-(1:8)
 dim(a)<-(2,4)
 
 print(a)
 o/p: 
     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8'

To give column and row names:
colnames(a)<-c("C1","C2","C3","C4")
rownames(a)<-c("R1","R2")


To access any value: eg: a[2,3] o/p: 6

To print the entire row: 
a[2,]
o/p: 2 4 6 8
Note: dont mention the column here but make sure that there is a comma. similarly for columns
To print multiple rows;
a[1:2,]

z <- matrix(1,10,10)


You can now do a contour map of the values simply by passing the matrix to the contour function:
contour(z)

For a 3D perspective plot, use persp function
persp(z)


The perspective plot looks a little odd, though. This is because persp automatically expands the view so that your highest value (the beach surface) is at the very top.
We can fix that by specifying our own value for the expand parameter.
persp(elevation, expand=0.2)

R includes some sample data sets to play around with. One of these is volcano, a 3D map of a dormant New Zealand volcano.
It's simply an 87x61 matrix with elevation values, but it shows the power of R's matrix visualizations.
Try creating a contour map of the volcano matrix:
contour(volcano)

Try a perspective plot (limit the vertical expansion to one-fifth again):
persp(volcano, expand=0.2)

The image function will create a heat map:
image(volcano)

To draw a line on a barplot:
barplot(a)
abline(h=mean(a))

median(a)
abline(h = median(a))

standard deviation: sd(a)
============================================================================================================
Factors:
Factors help you divide your data into groups. In this chapter, we've shown you how to create them, and how to use them to make plots more readable.
Often your data needs to be grouped by category: blood pressure by age range, accidents by auto manufacturer, and so forth. R has a special collection type called a factor to track these categorized values.

chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)

print(types)
O/P: gold   silver gems   gold   gems  
Levels: gems gold silver

Printed at the bottom, you'll see the factor's "levels" - groups of unique values. Notice also that there are no quotes around the values. That's because they're not strings; they're actually integer references to one of the factor's levels.
Let's take a look at the underlying integers. Pass the factor to the as.integer function:
as.integer(types)
o/p: 2 3 1 2 1
============================================================================================================
Plots with factors:

weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
plot(weights, prices)

We can't tell which chest is which, though. Fortunately, we can use different plot characters for each type by converting the factor to integers, and passing it to the pch argument of plot.
plot(weights, prices, pch=as.integer(types))

The legend function takes a location to draw in, a vector with label names, and a vector with numeric plot character IDs.
legend("topright", c("gems", "gold", "silver"), pch=1:3)

If you hard-code the labels and plot characters, you'll have to update them every time you change the plot factor. Instead, it's better to derive them by using the levels function on your factor:
legend("topright", levels(types), pch=1:length(levels(types)))

============================================================================================================
Data Frames:
The weights, prices, and types data structures are all deeply tied together, if you think about it. If you add a new weight sample, you need to remember to add a new price and type, or risk everything falling out of sync. To avoid trouble, it would be nice if we could tie all these variables together in a single data structure.
Fortunately, R has a structure for just this purpose: the data frame. You can think of a data frame as something akin to a database table or an Excel spreadsheet. It has a specific number of columns, each of which is expected to contain values of a particular type. It also has an indeterminate number of rows - sets of related values for each column.
Our vectors with treasure chest data are perfect candidates for conversion to a data frame. And it's easy to do. Call the data.frame function, and pass weights, prices, and types as the arguments. Assign the result to the treasure variable:
treasure <- data.frame(weights, prices, types)
print(treasure)
  weights prices  types
1     300   9000   gold
2     200   5000 silver
3     100  12000   gems
4     250   7500   gold
5     150  18000   gems

Data Frame access:
Just like matrices, it's easy to access individual portions of a data frame.
treasure[[2]]       // this means column number 2 that is prices
o/p: 9000  5000 12000  7500 18000

You could instead provide a column name as a string in double-brackets. (This is often more readable.) Retrieve the "weights" column:
treasure[["weights"]]  or treasure$weights

Typing in all your data by hand only works up to a point, obviously, which is why R was given the capability to easily load data in from external files.
We've created a couple data files for you to experiment with:
list.files()
[1] "targets.csv" "infantry.txt"
Our "targets.csv" file is in the CSV (Comma Separated Values) format exported by many popular spreadsheet programs. Here's what its content looks like:

"Port","Population","Worth"
"Cartagena",35000,10000
"Porto Bello",49000,15000
"Havana",140000,50000
"Panama City",105000,35000

You can load a CSV file's content into a data frame by passing the file name to the read.csv function. Try it with the "targets.csv" file
read.csv("targets.csv")


The "infantry.txt" file has a similar format, but its fields are separated by tab characters rather than commas. Its content looks like this:
Port         Infantry
Porto Bello  700
Cartagena    500
Panama City  1500
Havana       2000

For files that use separator strings other than commas, you can use the read.table function. The sep argument defines the separator character, and you can specify a tab character with "\t".

Call read.table on "infantry.txt", using tab separators:
read.table("infantry.txt", sep="\t")

read.table("targets.csv", sep=",")
           V1         V2    V3
1        Port Population Worth
2   Cartagena      35000 10000
3 Porto Bello      49000 15000
4      Havana     140000 50000
5 Panama City     105000 35000

Notice the "V1" and "V2" column headers? The first line is not automatically treated as column headers with read.table. This behavior is controlled by the header argument. Call read.table again, setting header to TRUE:
read.table("infantry.txt", sep="\t", header=TRUE)
		 Port Infantry
1 Porto Bello      700
2   Cartagena      500
3 Panama City     1500
4      Havana     2000

Merging Data frames:
R's merge function joins two data frames together, using the contents of one or more columns. First, we're going to store those file contents in two data frames for you, targets and infantry.
targets <- read.csv("targets.csv")
infantry <- read.table("infantry.txt", sep="\t" header=TRUE)

The merge function takes arguments with an x frame (targets) and a y frame (infantry). By default, it joins the frames on columns with the same name (the two Port columns). See if you can merge the two frames:
army <- merge(x = targets, y = infantry)
o/P:
Port Population Worth Infantry
1   Cartagena      35000 10000      500
2      Havana     140000 50000     2000
3 Panama City     105000 35000     1500
4 Porto Bello      49000 15000      700


The lm function takes a model formula, which is represented by a response variable (piracy rate), a tilde character (~), and a predictor variable (GDP). (Note that the response variable comes first.)
Try calculating the linear model for piracy rate by GDP, and assign it to the line variable:
line <- lm(countries$Piracy ~ countries$GDP)
abline(line)

R can test for corelation:
cor.test(army$targets, army$infantry)
====================================================================================================================
ggplot:

install.packages("ggplot2")

qplot(weights, prices, color = types)


help(package = "ggplot2")
====================================================================================================================
R has pre installed package "datasets"
eg: iris, lynx etc

?lynx    #opens the help section for lynx
head(lynx)  # we get first 6 elemens of the datasets
tail(lynx)  # we get last 6 elemens of the datasets
summary(lynx)    #tells few details of the dataset like min, max, mean etc
plot(lynx)    #to get visual idea
hist(lynx)		# to get histogram of the dataset


plot(lynx, type="p" main="My type P")    # displays graph using points
plot(lynx, type="l" main="My type l")		# using lines
plot(lynx, type="b" main="My type b")   # mixture of points and lines
plot(lynx, type="o" main="My type o")	# points overlaid by lines
plot(lynx, type="h" main="My type h")    # high density
plot(lynx, type="s" main="My type s")		# steps plot
plot(lynx, type="n" main="My type n")		# no plot

head(iris)
sum(iris$Sepal.Length)

attach(iris)    # attaches the dataset to your environment so that you dont have to mention the name of the dataset everytime

using graphs:
plot(lynx, main="Sachin's Lynx plot", col="red", col.main="green", cex.main=1.5)  #cex.main is the magnification of the plot, col.main is the color of the heading of the plot. col is the color of the plot
cex family can be used to mention all the magnification factors


Point Symbols:
?pch
x=2:4
plot(x, pch="c")   # marks the points with letter C
plot(x, pch=13)		# uses symbol number 13

example plot:

?rivers
x=1:141
y=rivers
plot(x,y, col="green", pch=20, main="Length of the rivers in NA", col.main="red", xlab="", ylab="Length in miles")

x<-paste(c("abc","aq"),1:3,sep="-")
o/P: "abc-1" "aq-2" "abc-3"